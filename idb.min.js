/*
 idb.js IndexedDB wrapper v3.0
 Licensed under the MIT license
 Copyright (c) 2020 Lukas Jans
 https://github.com/luniverse/idb
*/
'use strict';const IDB=class h{static promise(a){return new Promise((b,d)=>{a.onerror=()=>d(a.error);a.onsuccess=()=>b(a.result)})}static open(a,b={}){const d=indexedDB.open(b.name||"IDB",b.version||1);this.connection=this.promise(d);d.onupgradeneeded=f=>{const e=d.result;for(const c of e.objectStoreNames)a[c]||e.deleteObjectStore(c);for(const [c,g]of Object.entries(a))e.objectStoreNames.contains(c)||e.createObjectStore(c,g);b.upgrade&&b.upgrade(f)};for(const f of Object.keys(a))this[f]=new this.Table(f)}static get Table(){return class{constructor(a){this.name=
a}transaction(a){return h.connection.then(b=>{b=b.transaction(this.name,"readwrite").objectStore(this.name);b=a(b);return b instanceof Promise?b:h.promise(b)})}get(a){return this.transaction(b=>b.get(a))}put(a,b){return this.transaction(d=>d.put(a,b))}delete(a){return this.transaction(b=>b.delete(a))}clear(){return this.transaction(a=>a.clear())}all(a){return this.transaction(b=>new Promise((d,f)=>{const e=[],c=b.openCursor();c.onerror=()=>f(c.error);c.onsuccess=()=>{const g=c.result;g?(e.push(g.value),
g.continue()):d(a?e.filter(a):e)}}))}}}};